{"version":3,"sources":["src/CST.ts","src/BootScene.ts","src/MenuScene.ts","src/charactersprite.ts","src/mini_boss.ts","src/minion.ts","src/PlayScene.ts","src/Loader.ts","src/gameover.ts","src/main.ts"],"names":[],"mappings":"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","file":"main.18c8c0ae.js","sourceRoot":"..","sourcesContent":["export const CST = {\r\n    Scence:{\r\n        Boot:'Boot',\r\n        Menu:'Menu',\r\n        Play:'play',\r\n        Loader:'Loader',\r\n        Gameover:'gameover',\r\n    },\r\n    Audio:{\r\n        Track:'final_bell.mp3'\r\n    },\r\n    Image:{\r\n        Menu:'Menu.jpg',\r\n        start:'playB.png'\r\n    }\r\n     ,\r\n  /* Sprite:{\r\n        adventurer:'hero.png'\r\n    } */ \r\n}","import { CST } from \"./CST\";\r\nexport class BootScene extends Phaser.Scene{\r\n    constructor(){\r\n        super({\r\n            key:CST.Scence.Boot\r\n        })\r\n\r\n    }\r\n      init(){\r\n\r\n      }\r\n      preload(){\r\n         this.load.image(\"Menu\", \"./assets/image/Menu.jpg\") \r\n         this.load.image(\"playB\", \"./assets/image/playB.png\")\r\n\r\n        this.load.audio('theme', './assets/audio/final_bell.mp3')\r\n\r\n        this.load.atlas('knight', './assets/sprites/knight.png','./assets/sprites/knight_atlas.json' )\r\n         \r\n        \r\n            // this.load.on('load', (File:Phaser.Loader.File) =>{\r\n            //     console.log(File);\r\n                \r\n            // })\r\n\r\n      }\r\n      create(){\r\n          //@ts-ignore\r\n        this.scene.start(CST.Scence.Menu, \"sent\")\r\n      }\r\n}","// menu scene\r\nimport { CST } from \"./CST\";\r\nexport class MenuScene extends Phaser.Scene{\r\n    constructor(){\r\n        super({\r\n            key:CST.Scence.Menu\r\n        })\r\n\r\n    }\r\n        //@ts-ignore\r\n        init(data){\r\n            console.log(data);\r\n            console.log('got');\r\n            \r\n            \r\n        }\r\n\r\n        create(){\r\n\r\n            var width = this.cameras.main.width;\r\n            var height = this.cameras.main.height;\r\n            //@ts-ignore\r\n\r\n                var loadingText = this.make.text({\r\n                    x: width / 2,\r\n                    y: height * 0.20,\r\n                    text: 'Dungeon 0',\r\n                    style: {\r\n                        font: '64px monospace',\r\n                        fill: '#ffffff',\r\n                    }\r\n                    \r\n                });\r\n                loadingText.setOrigin(0.5, 0.5).setDepth(2);\r\n\r\n            let playB = this.add.image(this.game.renderer.width / 2, this.game.renderer.height / 2 , \"playB\").setDepth(1)\r\n            this.add.image(-200,-200,\"Menu\").setOrigin(0)\r\n\r\n\r\n            playB.setInteractive();\r\n\r\n            playB.on('pointerover',() =>{\r\n                playB.setScale(1.15)\r\n            })\r\n\r\n            playB.on('pointerout',() =>{\r\n                playB.setScale(1)\r\n            })\r\n            playB.on('pointerdown', () =>{\r\n                this.scene.start(CST.Scence.Loader)\r\n                this.sound.pauseOnBlur = false;\r\n                this.sound.play('theme',{\r\n                    loop:true,\r\n                    volume:0.45\r\n                    \r\n                })\r\n            })\r\n        }\r\n}","export class CharacterSprite extends Phaser.Physics.Arcade.Sprite {\r\n    hp: number;\r\n    maxHp:number;\r\n    attack:number;\r\n    xp:number;\r\n    xpCap:number;\r\n    level:number;\r\n    keys:number;\r\n\r\n    constructor(scene: Phaser.Scene, x: number, y: number, texture: string, frame?: string | number) {\r\n        super(scene, x, y, texture, frame);\r\n\r\n        scene.sys.updateList.add(this);\r\n        scene.sys.displayList.add(this);\r\n        scene.physics.world.enableBody(this);\r\n        this.setImmovable(true);\r\n        this.hp = 50;\r\n        this.xpCap = 5;\r\n        this.maxHp = 100;\r\n        this.attack = 25;\r\n        this.xp = 0;\r\n        this.level = 1;\r\n        this.keys = 0;\r\n    }  \r\n}\r\n","export class Mini_bossSprite extends Phaser.Physics.Arcade.Sprite {\r\n\r\n    constructor(scene: Phaser.Scene, x: number, y: number, texture: string, frame?: string | number) {\r\n        super(scene, x, y, texture, frame);\r\n\r\n        scene.sys.updateList.add(this);\r\n        scene.sys.displayList.add(this);\r\n        scene.physics.world.enableBody(this);\r\n        this.setImmovable(true);\r\n    }  \r\n}","export class MinionSprite extends Phaser.Physics.Arcade.Sprite {\r\n\r\n    constructor(scene: Phaser.Scene, x: number, y: number, texture: string, frame?: string | number) {\r\n        super(scene, x, y, texture, frame);\r\n\r\n        scene.sys.updateList.add(this);\r\n        scene.sys.displayList.add(this);\r\n        scene.physics.world.enableBody(this);\r\n        this.setImmovable(true);\r\n    }  \r\n}","import { CST } from \"./CST\";\r\nimport { CharacterSprite } from \"./charactersprite\";\r\nimport {Mini_bossSprite} from './mini_boss'\r\nimport{MinionSprite} from './minion'\r\nimport{Gameover} from './gameover'\r\nexport class PlayScene  extends Phaser.Scene{\r\n    player!: Phaser.Physics.Arcade.Sprite;\r\n    keyboard!: { [index: string]: Phaser.Input.Keyboard.Key };\r\n    attack!: Phaser.GameObjects.Image;\r\n    minion!: Phaser.Physics.Arcade.Sprite;\r\n    mini_boss!: Phaser.Physics.Arcade.Sprite;\r\n    monsters!: Phaser.Physics.Arcade.Group;\r\n    constructor(){\r\n        \r\n        super({\r\n            key:CST.Scence.Play\r\n        })\r\n\r\n    }\r\n    preload(){\r\n\r\n        this.textures.addSpriteSheetFromAtlas(\"hero\",{frameWidth:50,frameHeight:50, atlas:\"knight\", frame:\"knight\"})\r\n        this.load.image('tiles', './assets/image/dungeon_sheet.png')\r\n        this.load.image('mini-boss', './assets/sprites/miniboss.png')\r\n        this.load.image('minion', './assets/sprites/minion.png')\r\n        this.load.image('coin-xp', './assets/image/coins/real-coin.png')\r\n        this.load.image('coin-damage', './assets/image/coins/fake-coin.png')\r\n\r\n        this.load.tilemapTiledJSON('map','./assets/map/mappy.json')\r\n        \r\n        \r\n        console.log(this.textures.list);\r\n        this.anims.create({\r\n            key:\"left\",\r\n            frameRate:7,\r\n            frames:this.anims.generateFrameNumbers(\"hero\",{\r\n                start:2,\r\n                end:3,\r\n            })\r\n        })\r\n        this.anims.create({\r\n            key:\"right\",\r\n            frameRate:7,\r\n            frames:this.anims.generateFrameNumbers(\"hero\",{\r\n                start:4,\r\n                end:5\r\n            })\r\n            })\r\n            this.anims.create({\r\n                key:\"netural\",\r\n                frameRate:7,\r\n                frames:this.anims.generateFrameNumbers(\"hero\",{\r\n                    start:0,\r\n                    end:1\r\n                })\r\n            })       \r\n            \r\n        }\r\n        \r\n        \r\n        create(){\r\n\r\n        var map;\r\n        //Adding map and tileset image for map\r\n        map = this.add.tilemap('map')\r\n        let tile = map.addTilesetImage('dungeon_sheet','tiles');\r\n\r\n        //Encase a bug occurs, anything thats moveable will collide with world boundary\r\n        this.physics.world.setBounds(0,0, map.widthInPixels, map.heightInPixels);\r\n\r\n        // tile layers\r\n        let floor = map.createStaticLayer('floor',[tile],0,0).setDepth(0)\r\n        let rocks = map.createStaticLayer('decorations',[tile],0,0).setDepth(2);\r\n        let door = map.createStaticLayer('doors',[tile],0,0).setDepth(3)\r\n        let wall = map.createStaticLayer('wall',[tile],0,0); \r\n        let chest = map.createStaticLayer('gameover',[tile],0,0)\r\n        \r\n        // interactive objects\r\n        \r\n        var coins_buff = this.physics.add.group()\r\n        var coins_debuff = this.physics.add.group()\r\n        \r\n        let good_coins = map.getObjectLayer('xp-coins')['objects'];\r\n        good_coins.forEach((element)=>{\r\n            let coin = coins_buff.create(element.x,element.y,'coin-xp')\r\n            coin.setScale(0.03);\r\n            coin.setOrigin(0,1);\r\n        })\r\n        \r\n        let bad_coins = map.getObjectLayer('damage-coins')['objects'];\r\n        bad_coins.forEach((element)=>{\r\n            let coin = coins_debuff.create(element.x,element.y,'coin-damage')\r\n            coin.setScale(0.03);\r\n            coin.setOrigin(0,1);\r\n        })\r\n\r\n\r\n        //@ts-ignore\r\n        this.keyboard = this.input.keyboard.addKeys(\"W, A, S, D, SPACE\")\r\n        \r\n        \r\n        this.monsters = this.physics.add.group({ immovable: true });\r\n\r\n        \r\n        for (let i = 0; i < 6; i++) {\r\n            let x = Phaser.Math.FloatBetween(100,700)\r\n            let y = Phaser.Math.FloatBetween(100,700)\r\n            this.minion = new MinionSprite(this,x,y,'minion',0).setScale(0.25) \r\n            this.monsters.add(this.minion); \r\n        }\r\n\r\n        for (let i = 0; i < 3; i++) {\r\n            let x = Phaser.Math.FloatBetween(100,700)\r\n            let y = Phaser.Math.FloatBetween(100,700)\r\n            this.mini_boss = new Mini_bossSprite(this,x,y,'mini-boss',0).setScale(0.25)\r\n            this.monsters.add(this.mini_boss)\r\n        }\r\n\r\n        this.player = new CharacterSprite(this,440,777,'hero',10).setScale(0.30);\r\n        \r\n\r\n\r\n        //@ts-ignore\r\n        window.minion = this.minion;\r\n        //@ts-ignore\r\n        window.player = this.player;\r\n        //@ts-ignore\r\n        window.mini_boss = this.mini_boss;\r\n        //camera thats set to player\r\n        this.cameras.main.startFollow(this.player).setZoom(6.5)\r\n\r\n\r\n        //collisions properties\r\n        this.physics.world.addCollider(this.mini_boss,rocks)\r\n        this.physics.world.addCollider(this.minion,rocks)\r\n\r\n        this.physics.add.collider(this.player, rocks)\r\n        this.physics.add.collider(this.player, wall)\r\n\r\n        this.physics.world.addCollider(this.monsters.getChildren(),wall)\r\n        this.physics.world.addCollider(this.monsters.getChildren(),rocks)\r\n        this.physics.world.addCollider(this.player,this.monsters.getChildren(),damageOnCollide)\r\n\r\n        this.physics.add.collider(this.player, door)\r\n\r\n        //when player collides with  the chest. game ends and restart\r\n         this.physics.add.collider(this.player, chest,()=>{\r\n             alert('YOU WIN!!');\r\n             location.reload()\r\n         })\r\n         this.physics.add.overlap(this.player,coins_buff ,collect_buff)\r\n         this.physics.add.overlap(this.player,coins_debuff ,collect_debuff)\r\n        \r\n         chest.setCollisionByProperty({collides:true})\r\n         door.setCollisionByProperty({collides:true})\r\n         rocks.setCollisionByProperty({collides:true})\r\n         wall.setCollisionByProperty({collides:true})\r\n\r\n\r\n        // when player steps within distance of the tile, receives and alert\r\n         //@ts-ignore\r\n         wall.setTileLocationCallback(27,49,1,1,(player)=>{\r\n             alert(`Welcome Mighty Hero,You've entered a dungeon rumored to have treasure.Up ahead is where the treasure lies.You can see coins all over the dungeon,you decide to pick up a very shiny coin ,it heals you and you feel more powerful, you see another coin that is dull and decide to pick it up , it damages you and now you have ${player.hp}. You must be wary Hero.There are traps and monsters here for those that wishes to obtain the treasure`)\r\n\r\n             //Allow to alert only once\r\n            //@ts-ignore\r\n            wall.setTileLocationCallback(27,49,1,1,null)\r\n         })\r\n\r\n        //@ts-ignore\r\n         door.setTileLocationCallback(26,9,1.5,1, (player)=>{\r\n             alert(`Theres a chest on the other side, I need three keys, I only have ${player.keys}. I must collect coins to gain level and keys`)\r\n         })\r\n         chest.setTileLocationCallback(26,1,3,3, ()=>{\r\n            alert(\"The chest in within my reach!!\")\r\n\r\n             //Allow to alert only once\r\n          //@ts-ignore\r\n          chest.setTileLocationCallback(26,1,3,3, null)\r\n        })\r\n\r\n        \r\n\r\n        //@ts-ignore\r\n        function damageOnCollide(player,enemy) {\r\n            player.hp--;\r\n            console.log(`health:${player.hp}`);\r\n            if (player.hp === 0 ) {\r\n             alert('You Died')  \r\n             location.reload()\r\n            }\r\n        }\r\n    \r\n        // How the player collect the coins to gain xp, health, and keys\r\n         //@ts-ignore\r\n        function collect_buff(player,coin) {\r\n            coin.destroy(true)\r\n            let num = 30;\r\n            player.hp++;\r\n            player.xp++;\r\n            if (player.xp === player.xpCap) {\r\n                num++\r\n                player.hp+= num;\r\n                player.level++;\r\n                player.xpCap++;\r\n                player.keys++;\r\n                player.maxHp+= num;\r\n                player.xp =0;\r\n                alert(`You have reached level:${player.level} and you're health cap is now ${player.maxHp}, current health ${player.hp}`)\r\n            }\r\n            if (player.hp >= player.maxHp) {\r\n                player.hp = player.maxHp\r\n            }\r\n            // must reach level four to reach the chest and end the game\r\n            if (player.keys === 3) {\r\n                door.setCollisionByProperty({collides:true},false)\r\n                //@ts-ignore\r\n                door.setTileLocationCallback(26,9,1.5,1, null)\r\n                alert(`I have four keys now, I can open the door now!!`)\r\n            } \r\n            \r\n            console.log(`health:${player.hp} xp:${player.xp} level:${player.level}`);\r\n        }\r\n\r\n\r\n        // How the player takes damage from the fake coins\r\n          //@ts-ignore\r\n          function collect_debuff(this:this,player,coin) {\r\n            player.hp--;\r\n            console.log(`health:${player.hp}`);\r\n            coin.destroy(true)\r\n            if (player.hp <= 2) {\r\n                alert(`I can't take to many hits, I only have ${player.hp} health remaining`)\r\n            }            \r\n        }          \r\n    }\r\n    \r\n    // Movement for player\r\n    update(time: number, delta: number) { //delta 16.666 @ 60fps\r\n\r\n        // An example of how to  make more than one object move\r\n\r\n        for (let i = 0; i < this.monsters.getChildren().length; i++) {\r\n            this.physics.accelerateToObject(this.monsters.getChildren()[i], this.player,40,300,300);\r\n\r\n        }\r\n\r\n            if (this.keyboard.D.isDown) {\r\n                this.player.setVelocityX(60);\r\n            }\r\n\r\n            if (this.keyboard.W.isDown) {\r\n                this.player.setVelocityY(-60);\r\n            }\r\n\r\n            if (this.keyboard.S.isDown) {\r\n                this.player.setVelocityY(60);\r\n            }\r\n\r\n            if (this.keyboard.A.isDown) {\r\n                this.player.setVelocityX(-60);\r\n            }\r\n            if (this.keyboard.A.isUp && this.keyboard.D.isUp) { //not moving on X axis\r\n                this.player.setVelocityX(0);\r\n            }\r\n            if (this.keyboard.W.isUp && this.keyboard.S.isUp) { //not pressing y movement\r\n                this.player.setVelocityY(0);\r\n            }\r\n            // if (this.keyboard.SPACE.isDown) {\r\n            //     var attack = this.add.image(this.player.x,this.player.y,'sword').setScale(0.5)\r\n            //     this.physics.world.enableBody(attack); \r\n            //     this.physics.add.existing(attack)\r\n            //     //@ts-ignore\r\n            //     attack.body.velocity.y -= 250;\r\n            // }\r\n\r\n\r\n            // Animation for player\r\n            if (this.player.body.velocity.x > 0) { //moving right\r\n                this.player.play(\"right\", true);\r\n            } else if (this.player.body.velocity.x < 0) { //moving left\r\n                this.player.play(\"left\", true);\r\n            } else if (this.player.body.velocity.y < 0) { //moving up\r\n                this.player.play(\"netural\", true);\r\n            } else if (this.player.body.velocity.y > 0) { //moving down\r\n                this.player.play(\"netural\", true);\r\n            } \r\n    }\r\n}\r\n\r\n","import{CST} from './CST'\r\nexport class Loader extends Phaser.Scene{\r\n    constructor(){\r\n        super({\r\n            key:CST.Scence.Loader\r\n        })\r\n\r\n    }\r\n    init(){\r\n\r\n    }\r\n    preload(){\r\n        let loadingBar = this.add.graphics({\r\n            fillStyle :{\r\n                color:0xa60000\r\n            }\r\n            })\r\n            \r\n            for (let i = 0; i < 300; i++) {\r\n                this.load.spritesheet('hero'+ i, './assets/sprites/hero.png',{\r\n                    frameWidth:54,\r\n                    frameHeight:54,\r\n                    })\r\n                \r\n            }\r\n            var width = this.cameras.main.width;\r\n            var height = this.cameras.main.height;\r\n            //@ts-ignore\r\n            this.load.on(\"progress\", (percent)=>{\r\n                var loadingText = this.make.text({\r\n                    x: width / 2,\r\n                    y: height / 2 - 50,\r\n                    text: 'Loading...',\r\n                    style: {\r\n                        font: '20px monospace',\r\n                        fill: '#ffffff'\r\n                    }\r\n                });\r\n                loadingText.setOrigin(0.5, 0.5);\r\n                loadingBar.fillRect(0, this.game.renderer.height / 2 + 50, this.game.renderer.width * percent ,50)\r\n\r\n                var controls = this.make.text({\r\n                    x: width / 2,\r\n                    y: height / 2 + 150 ,\r\n                    text: 'Press A,W,D,S to move and avoid the monsters',\r\n                    style: {\r\n                        font: '48px monospace',\r\n                        fill: '#ffffff'\r\n                    }\r\n                })\r\n                controls.setOrigin(0.5, 0.5);\r\n                \r\n            })\r\n\r\n            var percentText = this.make.text({\r\n                x: width / 2,\r\n                y: height / 2 - 5,\r\n                text: '0%',\r\n                style: {\r\n                    font: '18px monospace',\r\n                    fill: '#ffffff'\r\n                }\r\n            });\r\n            percentText.setOrigin(0.5, 0.5);\r\n            \r\n            //@ts-ignore\r\n            this.load.on('progress', function (value) {\r\n                //@ts-ignore\r\n                percentText.setText(parseInt(value * 100) + '%');\r\n             \r\n            });\r\n\r\n            \r\n            this.load.on('complete', ()=>{\r\n                loadingBar.destroy();\r\n                percentText.destroy();\r\n                \r\n                \r\n                \r\n            })            \r\n    }\r\n\r\n    create(){\r\n        this.scene.start(CST.Scence.Play)\r\n    }\r\n}","import {CST} from './CST'\r\nexport class Gameover extends Phaser.Scene{\r\n    constructor(){\r\n        super({\r\n            key:CST.Scence.Gameover\r\n        })\r\n    }\r\n    preload(){\r\n        this.scene.start(CST.Scence.Gameover)\r\n        let loadingBar = this.add.graphics()\r\n            \r\n            for (let i = 0; i < 150; i++) {\r\n                this.load.spritesheet('hero'+ i, './assets/sprites/hero.png',{\r\n                    frameWidth:54,\r\n                    frameHeight:54,\r\n                    })\r\n                \r\n            }\r\n            var width = this.cameras.main.width;\r\n            var height = this.cameras.main.height;\r\n            //@ts-ignore\r\n            this.load.on(\"progress\", ()=>{\r\n                var loadingText = this.make.text({\r\n                    x: width / 2,\r\n                    y: height / 2 - 50,\r\n                    text: 'GAME OVER',\r\n                    style: {\r\n                        font: '108px monospace',\r\n                        fill: '#ffffff'\r\n                    }\r\n                });\r\n                loadingText.setOrigin(0.5, 0.5);\r\n               \r\n               \r\n                \r\n            })\r\n            \r\n            this.load.on('complete', ()=>{\r\n                loadingBar.destroy(true);                \r\n            })\r\n    }\r\n    create(){\r\n        this.scene.start(CST.Scence.Menu)\r\n    }\r\n}","/**@type {import(\"../type/phaser\")} */\r\n\r\nimport {BootScene} from './BootScene'\r\nimport { MenuScene } from './MenuScene';\r\nimport {PlayScene} from './PlayScene'\r\nimport{Loader} from './Loader'\r\nimport {Gameover} from './gameover'\r\n\r\nlet game = new Phaser.Game({\r\n    width:window.innerWidth,\r\n    height:window.innerHeight,\r\n    backgroundColor: 0x252538 ,\r\n    scene:[\r\n        BootScene,MenuScene,PlayScene,Loader,Gameover\r\n    ],\r\n    render:{\r\n        pixelArt:true,\r\n    },\r\n    physics: {\r\n        default: \"arcade\",\r\n        arcade: {\r\n            debug: false\r\n        }\r\n    },\r\n    scale:{\r\n        mode:Phaser.Scale.FIT,\r\n        autoCenter:Phaser.Scale.CENTER_BOTH\r\n    }\r\n\r\n    \r\n});\r\n\r\n\r\n\r\n"]}